[build-system]
build-backend = "maturin"
requires = [
  "maturin<2,>=1.3.2",
]

[project]
name = "functime"
version = "0.9.6"
description = "Time-series machine learning at scale."
readme = "README.md"
authors = [
  { name = "Chris Lo", email = "chris@functime.ai" },
  { name = "Daryl Lim", email = "daryl@functime.ai" },
]
maintainers = [
  { name = "functime Team", email = "team@functime.ai" },
  { name = "Luca Baggi" }
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.8"
dependencies = [
  "cloudpickle",
  "flaml<3,>=2.0.2",
  "holidays",
  "numpy",
  "polars>=0.20.7",
  "scikit-learn<2,>=1.2.2",
  "scipy",
  "tqdm",
  'typing-extensions; python_version < "3.10"',
]

[project.optional-dependencies]
plot = [
  "kaleido==0.2.1",
  "pandas",
  "plotly",
]
cat = [
  "catboost",
]
lgb = [
  "lightgbm",
]
xgb = [
  "pyarrow",
  "xgboost",
]
ann = [
  "pyarrow",
  "pylance",
]
tree = [
  "functime[cat,lgb,xgb]"
]
llm = [
  "openai",
  "tabulate",
  "tenacity",
  "tiktoken",
]

# provisionally here until PEP 735 is approved: https://peps.python.org/pep-0735/
dev = [
  "pre-commit",
  "functime[doc,plot,test]"
]
doc = [
  "jupyterlab",
  "mkdocs",
  "mkdocs-jupyter",
  "mkdocs-material",
  "mkdocstrings-python",
]
test = [
  "aeon<0.5.0",
  "coverage[toml]",
  "joblib",
  "mlforecast==0.8.1",
  "pandas",
  "pyarrow",
  "pytest",
  "pytest-benchmark",
  "pytest-memray",
  "pytest-timeout",
  "statsmodels",
  "tsfresh",
]

[tool.maturin]
module-name = "functime._functime_rust"
features = ["pyo3/extension-module"]
exclude = ["docs/**, data/**", "tests/**", ".pre-commit-config.yaml"]

[tool.ruff]
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "UP", # pyupgrade
  "YTT", # flake8-2020
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "B905", # `zip()` without an explicit `strict=` parameter
  "B018", # Found useless expression.
  "F821", # Undefined name
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["I002"]
"docs/**" = ["I002"]
"**.ipynb" = ["E402"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
  "-m not benchmark and not slow",
  "--benchmark-disable",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "benchmark: marks tests as part of benchmarking",
  "multivariate: marks multivariate forecast test",
]
xfail_strict = true

[tool.coverage.run]
parallel = true
source = ["tests", "functime"]
context = '${CONTEXT}'

[tool.pyright]
exclude = [
  ".venv"
]
venvPath = "."
venv = ".venv"
